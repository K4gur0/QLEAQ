security:
    encoders:
        App\Entity\Nomade:
            algorithm: auto
        App\Entity\Proprietaire:
            algorithm: auto
        App\Entity\Admin:
            algorithm: auto


#    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
#    providers:
#        # used to reload user from session & other features (e.g. switch_user)
#        app_user_provider:
#            entity:
#                class: App\Entity\Nomade
#                property: email

    providers:
        nomade_users:
            entity:
                class: App\Entity\Nomade
                property: email

        proprio_users:
            entity:
                class: App\Entity\Proprietaire
                property: email
        admin:
            entity:
                class: App\Entity\Admin
                property: email
        all_users:
            chain:
                providers: ['nomade_users', 'proprio_users', 'admin']
        # used to reload user from session & other features (e.g. switch_user)




    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy
            provider: all_users
            guard:
                authenticators:
                    - App\Security\NomadeAuthenticator
                    - App\Security\ProprioAuthenticator
                    - App\Security\AdminAuthenticator
                entry_point: App\Security\NomadeAuthenticator
            logout:
                path: app_logout
#                 where to redirect after logout
#                 target: homepage

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
         - { path: ^/nomade, roles: ROLE_USER }
         - { path: ^/proprio, roles: ROLE_PROPRIO }

    role_hierarchy:
        ROLE_PROPRIO:      ROLE_USER
        ROLE_ADMIN:       [ROLE_USER, ROLE_PROPRIO]
